{"ast":null,"code":"// const API_KEY = 'd5c54a92b47f0f9c49fa254decc1ac92';\nconst API_KEY = '762564e4d97f34461fcfcc9af696767d';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Example: https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\nconst fetchWeatherData = (dataType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + dataType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\n\n// extract key current weather data from weather api into a desired format\n// see JSON structure at https://openweathermap.org/current\nconst currentWeatherFormat = data => {\n  let {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    wind: {\n      speed\n    },\n    name,\n    dt,\n    weather\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\n\n// extract key forecast weather data from weather api into a desired format\n// see JSON structure at https://openweathermap.org/one-call\nconst forecastWeatherFormat = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n};\n\n// fetch api data based on specified data formats\nconst fetchFormattedData = async searchParams => {\n  const fetchCurrentWeather = await fetchWeatherData('weather', searchParams).then(currentWeatherFormat);\n};\nexport default fetchFormattedData;","map":{"version":3,"names":["API_KEY","BASE_URL","fetchWeatherData","dataType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","currentWeatherFormat","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","wind","speed","name","dt","weather","details","icon","forecastWeatherFormat","timezone","daily","hourly","fetchFormattedData","fetchCurrentWeather"],"sources":["/Users/shaynesoh/Github/projects/weather/src/services/weatherApi.js"],"sourcesContent":["// const API_KEY = 'd5c54a92b47f0f9c49fa254decc1ac92';\nconst API_KEY = '762564e4d97f34461fcfcc9af696767d';\nconst BASE_URL= 'https://api.openweathermap.org/data/2.5';\n\n// Example: https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\nconst fetchWeatherData = (dataType, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + dataType);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n    return fetch(url).then((res) => res.json());\n};\n\n// extract key current weather data from weather api into a desired format\n// see JSON structure at https://openweathermap.org/current\nconst currentWeatherFormat = (data) => {\n    let {\n        coord: { lat, lon },\n        main: { temp, feels_like, temp_min, temp_max, humidity },\n        sys: { country, sunrise, sunset },\n        wind: { speed },\n        name,\n        dt,\n        weather\n      } = data;\n    \n    const { main: details, icon } = weather[0];\n    \n    return {\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        details,\n        icon,\n        speed,\n    };\n};\n\n// extract key forecast weather data from weather api into a desired format\n// see JSON structure at https://openweathermap.org/one-call\nconst forecastWeatherFormat = (data) => {\n    let {timezone, daily, hourly} = data;\n};\n\n// fetch api data based on specified data formats\nconst fetchFormattedData = async(searchParams) => {\n    const fetchCurrentWeather = await fetchWeatherData('weather', searchParams)\n        .then(currentWeatherFormat);\n}\n\nexport default fetchFormattedData;"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAE,yCAAyC;;AAEzD;AACA,MAAMC,gBAAgB,GAAG,CAACC,QAAQ,EAAEC,YAAY,KAAK;EACjD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAET;EAAQ,CAAC,CAAC;EACrE,OAAOU,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC;AAC/C,CAAC;;AAED;AACA;AACA,MAAMC,oBAAoB,GAAIC,IAAI,IAAK;EACnC,IAAI;IACAC,KAAK,EAAE;MAAEC,GAAG;MAAEC;IAAI,CAAC;IACnBC,IAAI,EAAE;MAAEC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAS,CAAC;IACxDC,GAAG,EAAE;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAO,CAAC;IACjCC,IAAI,EAAE;MAAEC;IAAM,CAAC;IACfC,IAAI;IACJC,EAAE;IACFC;EACF,CAAC,GAAGlB,IAAI;EAEV,MAAM;IAAEI,IAAI,EAAEe,OAAO;IAAEC;EAAK,CAAC,GAAGF,OAAO,CAAC,CAAC,CAAC;EAE1C,OAAO;IACHhB,GAAG;IACHC,GAAG;IACHE,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRO,IAAI;IACJC,EAAE;IACFN,OAAO;IACPC,OAAO;IACPC,MAAM;IACNM,OAAO;IACPC,IAAI;IACJL;EACJ,CAAC;AACL,CAAC;;AAED;AACA;AACA,MAAMM,qBAAqB,GAAIrB,IAAI,IAAK;EACpC,IAAI;IAACsB,QAAQ;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGxB,IAAI;AACxC,CAAC;;AAED;AACA,MAAMyB,kBAAkB,GAAG,MAAMpC,YAAY,IAAK;EAC9C,MAAMqC,mBAAmB,GAAG,MAAMvC,gBAAgB,CAAC,SAAS,EAAEE,YAAY,CAAC,CACtEO,IAAI,CAACG,oBAAoB,CAAC;AACnC,CAAC;AAED,eAAe0B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}